!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFSIZE	btree.c	7;"	d	file:
BUFSIZE	countsimilarvars.c	8;"	d	file:
BUFSIZE	getch.h	5;"	d
BUFSIZE	getvarnames.c	7;"	d	file:
CC	Makefile	/^CC=clang$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -lm -g$/;"	m
EXECUTABLE	Makefile	/^EXECUTABLE=$/;"	m
GETCH_H	getch.h	2;"	d
GETWORD_HANDLING_H	getword_handling.h	2;"	d
KEYWORDCOUNTING_H	keywordcounting.h	2;"	d
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
MAXARG	countsimilarvars.c	7;"	d	file:
MAXWORD	btree.c	6;"	d	file:
MAXWORD	countsimilarvars.c	6;"	d	file:
MAXWORD	getvarnames.c	6;"	d	file:
MAXWORD	getword_handling.h	8;"	d
MAXWORD	keywordcounting.h	7;"	d
NKEYS	keywordcounting.h	8;"	d
NUMVARTYPES	getvarnames.c	9;"	d	file:
OBJECTS	Makefile	/^OBJECTS=$/;"	m
SOURCES	Makefile	/^SOURCES=$/;"	m
STOP	getvarnames.c	8;"	d	file:
STRUCT	getvarnames.c	10;"	d	file:
XMAX	makepoint.c	1;"	d	file:
YMAX	makepoint.c	2;"	d	file:
addtree	btree.c	/^struct tnode *addtree(struct tnode *p, char *w)$/;"	f
addtree	countsimilarvars.c	/^struct tnode *addtree(struct tnode *p, char *w)$/;"	f
binsearch	keywordcounting.c	/^int binsearch(char *word, struct key tab[], int n)$/;"	f
binsearch	varnamenotes.c	/^int binsearch(char *word, struct vartypes tab[], int n) \/\/ word, tab, n$/;"	f
buf	getch.c	/^char buf[BUFSIZE];  \/* buffer for ungetch *\/$/;"	v
bufp	getch.c	/^int bufp = 0;       \/* next free position in buf *\/$/;"	v
canonrect	makepoint.c	/^struct rect canonrect(struct rect r)$/;"	f
commas	varnamenotes.c	/^   if not in parentheses, names are separated by commas, stop when a ';' appears$/;"	v
count	btree.c	/^   int count;              \/* number of occurrences of text *\/$/;"	m	struct:tnode	file:
count	countsimilarvars.c	/^   int count;              \/* number of occurrences of text *\/$/;"	m	struct:tnode	file:
count	getvarnames.c	/^   int count;              \/* number of occurrences of text *\/$/;"	m	struct:tnode	file:
count	keywordcounting.h	/^   int count;$/;"	m	struct:key
get_line_comment	getword_handling.c	/^char *get_line_comment(char *w, int lim, char startingchar)$/;"	f
get_terminated_comment	getword_handling.c	/^char *get_terminated_comment(char *w, int lim, char startingchar)$/;"	f
get_var_names_outof_paren	getvarnames.c	/^int get_var_names_outof_paren()$/;"	f
getch	getch.c	/^int getch(void) \/*  get a (possibly pushed-back) character *\/$/;"	f
getword	getword_handling.c	/^char getword(char *word, int lim)$/;"	f
handle_normal_word	getword_handling.c	/^char *handle_normal_word(char *w, int lim, char startingchar)$/;"	f
handle_number	getword_handling.c	/^char *handle_number(char *w, int lim, char startingchar)$/;"	f
handle_possible_comment	getword_handling.c	/^char *handle_possible_comment(char *w, int lim, char startingchar)$/;"	f
handle_string	getword_handling.c	/^char *handle_string(char *w, int lim, char startingchar)$/;"	f
is_word_char	getword_handling.c	/^int is_word_char(char c)$/;"	f
key	keywordcounting.h	/^struct key {$/;"	s
keytab	keywordcounting.h	/^} keytab[] = {$/;"	v	typeref:struct:key
left	btree.c	/^   struct tnode *left;     \/* left child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
left	countsimilarvars.c	/^   struct tnode *left;     \/* left child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
left	getvarnames.c	/^   struct tnode *left;     \/* left child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
main	btree.c	/^int main()$/;"	f
main	countsimilarvars.c	/^int main(int argc, char *argv[])$/;"	f
main	getvarnames.c	/^int main()$/;"	f
main	keywordcounting.c	/^int main()$/;"	f
main	makepoint.c	/^int main() {$/;"	f
max	makepoint.c	5;"	d	file:
middle	makepoint.c	/^struct point middle;$/;"	v	typeref:struct:point
min	makepoint.c	4;"	d	file:
parentheses	varnamenotes.c	/^   if in parentheses, names are separated by commas and vartypes, names stop when exiting parentheses$/;"	v
parentheses	varnamenotes.c	/^   if not in parentheses, names are separated by commas, stop when a ';' appears$/;"	v
point	makepoint.c	/^struct point {$/;"	s	file:
pt1	makepoint.c	/^   struct point pt1;$/;"	m	struct:rect	typeref:struct:rect::point	file:
pt2	makepoint.c	/^   struct point pt2;$/;"	m	struct:rect	typeref:struct:rect::point	file:
ptinrect	makepoint.c	/^int ptinrect(struct point p, struct rect r)$/;"	f
qualifiers	getvarnames.c	/^struct qualifiers {$/;"	s	file:
qualifiers	getvarnames.c	/^} qualifiers[] = {$/;"	v	typeref:struct:qualifiers
rect	makepoint.c	/^struct rect {$/;"	s	file:
right	btree.c	/^   struct tnode *right;    \/* right child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
right	countsimilarvars.c	/^   struct tnode *right;    \/* right child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
right	getvarnames.c	/^   struct tnode *right;    \/* right child *\/$/;"	m	struct:tnode	typeref:struct:tnode::tnode	file:
screen	makepoint.c	/^struct rect screen;$/;"	v	typeref:struct:rect
skip_line_comment	getword_handling.c	/^char *skip_line_comment(char *w, int lim, char startingchar)$/;"	f
skip_terminated_comment	getword_handling.c	/^char *skip_terminated_comment(char *w, int lim, char startingchar)$/;"	f
strdupa	btree.c	/^char *strdupa(char *s) \/* make a duplicate of s *\/$/;"	f
strdupa	countsimilarvars.c	/^char *strdupa(char *s) \/* make a duplicate of s *\/$/;"	f
talloc	btree.c	/^struct tnode *talloc(void)$/;"	f
talloc	countsimilarvars.c	/^struct tnode *talloc(void)$/;"	f
tnode	btree.c	/^struct tnode {  \/* the tree node *\/$/;"	s	file:
tnode	countsimilarvars.c	/^struct tnode {  \/* the tree node *\/$/;"	s	file:
tnode	getvarnames.c	/^struct tnode {  \/* the tree node *\/$/;"	s	file:
treeprint	btree.c	/^void treeprint(struct tnode *p)$/;"	f
treeprint	countsimilarvars.c	/^void treeprint(struct tnode *p)$/;"	f
ungetch	getch.c	/^void ungetch(int c)  \/* push character back on input *\/$/;"	f
vartypes	getvarnames.c	/^struct vartypes {$/;"	s	file:
vartypes	getvarnames.c	/^} vartypes[] = {$/;"	v	typeref:struct:vartypes
vartypes	varnamenotes.c	/^   if in parentheses, names are separated by commas and vartypes, names stop when exiting parentheses$/;"	v
word	btree.c	/^   char *word;             \/* Points to text *\/$/;"	m	struct:tnode	file:
word	countsimilarvars.c	/^   char *word;             \/* Points to text *\/$/;"	m	struct:tnode	file:
word	getvarnames.c	/^   char * word;$/;"	m	struct:qualifiers	file:
word	getvarnames.c	/^   char *word;             \/* Points to text *\/$/;"	m	struct:tnode	file:
word	getvarnames.c	/^   char *word;$/;"	m	struct:vartypes	file:
word	keywordcounting.h	/^   char *word;$/;"	m	struct:key
x	makepoint.c	/^   int x;$/;"	m	struct:point	file:
y	makepoint.c	/^   int y;$/;"	m	struct:point	file:
